// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Not(in=sel[1],out=notsel1);
    Not(in=sel[0],out=notsel0);
    
    And(a=notsel0,b=a[0],out=and1);
    And(a=sel[0],b=b[0],out=and2);
    And(a=notsel0,b=c[0],out=and3);
    And(a=sel[0],b=d[0],out=and4);
    Or(a=and1,b=and2,out=or1);
    Or(a=and3,b=and4,out=or2);
    And(a=notsel1,b=or1,out=out1);
    And(a=sel[1],b=or2,out=out2);
    Or(a=out1,b=out2,out=out[0]);
    
    And(a=notsel0,b=a[1],out=and5);
    And(a=sel[0],b=b[1],out=and6);
    And(a=notsel0,b=c[1],out=and7);
    And(a=sel[0],b=d[1],out=and8);
    Or(a=and5,b=and6,out=or3);
    Or(a=and7,b=and8,out=or4);
    And(a=notsel1,b=or3,out=out3);
    And(a=sel[1],b=or4,out=out4);
    Or(a=out3,b=out4,out=out[1]);
    
    And(a=notsel0,b=a[2],out=and9);
    And(a=sel[0],b=b[2],out=and10);
    And(a=notsel0,b=c[2],out=and11);
    And(a=sel[0],b=d[2],out=and12);
    Or(a=and9,b=and10,out=or5);
    Or(a=and11,b=and12,out=or6);
    And(a=notsel1,b=or5,out=out5);
    And(a=sel[1],b=or6,out=out6);
    Or(a=out5,b=out6,out=out[2]);
    
    And(a=notsel0,b=a[3],out=and13);
    And(a=sel[0],b=b[3],out=and14);
    And(a=notsel0,b=c[3],out=and15);
    And(a=sel[0],b=d[3],out=and16);
    Or(a=and13,b=and14,out=or7);
    Or(a=and15,b=and16,out=or8);
    And(a=notsel1,b=or7,out=out7);
    And(a=sel[1],b=or8,out=out8);
    Or(a=out7,b=out8,out=out[3]);
    
    And(a=notsel0,b=a[4],out=and17);
    And(a=sel[0],b=b[4],out=and18);
    And(a=notsel0,b=c[4],out=and19);
    And(a=sel[0],b=d[4],out=and20);
    Or(a=and17,b=and18,out=or9);
    Or(a=and19,b=and20,out=or10);
    And(a=notsel1,b=or9,out=out9);
    And(a=sel[1],b=or10,out=out10);
    Or(a=out9,b=out10,out=out[4]);
    
    And(a=notsel0,b=a[5],out=and21);
    And(a=sel[0],b=b[5],out=and22);
    And(a=notsel0,b=c[5],out=and23);
    And(a=sel[0],b=d[5],out=and24);
    Or(a=and21,b=and22,out=or11);
    Or(a=and23,b=and24,out=or12);
    And(a=notsel1,b=or11,out=out11);
    And(a=sel[1],b=or12,out=out12);
    Or(a=out11,b=out12,out=out[5]);
    
    And(a=notsel0,b=a[6],out=and25);
    And(a=sel[0],b=b[6],out=and26);
    And(a=notsel0,b=c[6],out=and27);
    And(a=sel[0],b=d[6],out=and28);
    Or(a=and25,b=and26,out=or13);
    Or(a=and27,b=and28,out=or14);
    And(a=notsel1,b=or13,out=out13);
    And(a=sel[1],b=or14,out=out14);
    Or(a=out13,b=out14,out=out[6]);
    
    And(a=notsel0,b=a[7],out=and29);
    And(a=sel[0],b=b[7],out=and30);
    And(a=notsel0,b=c[7],out=and31);
    And(a=sel[0],b=d[7],out=and32);
    Or(a=and29,b=and30,out=or15);
    Or(a=and31,b=and32,out=or16);
    And(a=notsel1,b=or15,out=out15);
    And(a=sel[1],b=or16,out=out16);
    Or(a=out15,b=out16,out=out[7]);
    
    And(a=notsel0,b=a[8],out=and33);
    And(a=sel[0],b=b[8],out=and34);
    And(a=notsel0,b=c[8],out=and35);
    And(a=sel[0],b=d[8],out=and36);
    Or(a=and33,b=and34,out=or17);
    Or(a=and35,b=and36,out=or18);
    And(a=notsel1,b=or17,out=out17);
    And(a=sel[1],b=or18,out=out18);
    Or(a=out17,b=out18,out=out[8]);
    
    And(a=notsel0,b=a[9],out=and37);
    And(a=sel[0],b=b[9],out=and38);
    And(a=notsel0,b=c[9],out=and39);
    And(a=sel[0],b=d[9],out=and40);
    Or(a=and37,b=and38,out=or19);
    Or(a=and39,b=and40,out=or20);
    And(a=notsel1,b=or19,out=out19);
    And(a=sel[1],b=or20,out=out20);
    Or(a=out19,b=out20,out=out[9]);
    
    And(a=notsel0,b=a[10],out=and41);
    And(a=sel[0],b=b[10],out=and42);
    And(a=notsel0,b=c[10],out=and43);
    And(a=sel[0],b=d[10],out=and44);
    Or(a=and41,b=and42,out=or21);
    Or(a=and43,b=and44,out=or22);
    And(a=notsel1,b=or21,out=out21);
    And(a=sel[1],b=or22,out=out22);
    Or(a=out21,b=out22,out=out[10]);
    
    And(a=notsel0,b=a[11],out=and45);
    And(a=sel[0],b=b[11],out=and46);
    And(a=notsel0,b=c[11],out=and47);
    And(a=sel[0],b=d[11],out=and48);
    Or(a=and45,b=and46,out=or23);
    Or(a=and47,b=and48,out=or24);
    And(a=notsel1,b=or23,out=out23);
    And(a=sel[1],b=or24,out=out24);
    Or(a=out23,b=out24,out=out[11]);
    
    And(a=notsel0,b=a[12],out=and49);
    And(a=sel[0],b=b[12],out=and50);
    And(a=notsel0,b=c[12],out=and51);
    And(a=sel[0],b=d[12],out=and52);
    Or(a=and49,b=and50,out=or25);
    Or(a=and51,b=and52,out=or26);
    And(a=notsel1,b=or25,out=out25);
    And(a=sel[1],b=or26,out=out26);
    Or(a=out25,b=out26,out=out[12]);
    
    And(a=notsel0,b=a[13],out=and53);
    And(a=sel[0],b=b[13],out=and54);
    And(a=notsel0,b=c[13],out=and55);
    And(a=sel[0],b=d[13],out=and56);
    Or(a=and53,b=and54,out=or27);
    Or(a=and55,b=and56,out=or28);
    And(a=notsel1,b=or27,out=out27);
    And(a=sel[1],b=or28,out=out28);
    Or(a=out27,b=out28,out=out[13]);
    
    And(a=notsel0,b=a[14],out=and57);
    And(a=sel[0],b=b[14],out=and58);
    And(a=notsel0,b=c[14],out=and59);
    And(a=sel[0],b=d[14],out=and60);
    Or(a=and57,b=and58,out=or29);
    Or(a=and59,b=and60,out=or30);
    And(a=notsel1,b=or29,out=out29);
    And(a=sel[1],b=or30,out=out30);
    Or(a=out29,b=out30,out=out[14]);
    
    And(a=notsel0,b=a[15],out=and61);
    And(a=sel[0],b=b[15],out=and62);
    And(a=notsel0,b=c[15],out=and63);
    And(a=sel[0],b=d[15],out=and64);
    Or(a=and61,b=and62,out=or31);
    Or(a=and63,b=and64,out=or32);
    And(a=notsel1,b=or31,out=out31);
    And(a=sel[1],b=or32,out=out32);
    Or(a=out31,b=out32,out=out[15]);
    
}

